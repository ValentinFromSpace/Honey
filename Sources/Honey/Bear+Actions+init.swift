//
//  Bear+Actions+init.swift
//  Honey
//
//  Created by Valentin Walter on 5/22/21.
//  Auto generated by Sourcery with
//  `Memberwise intializer extensions.sourcerytemplate`.
//
//  This is necessary as synthesized memberwise inits are not public.
//
//  Unfortunately, every intial argument had to be implemented as static func
//  instead of a proper init to avoid the "Invalid redaclaration of synthesized
//  memberwise init" error.
//

import Foundation

extension Bear.AddFile.Input {
	public static func create(id: String?, title: String?, selected: Bool? = nil, file: Data, header: String? = nil, filename: String, mode: Bear.AddMode? = nil, openNote: Bool? = nil, newWindow: Bool? = nil, showWindow: Bool? = nil, edit: Bool? = nil, token: String? = nil) -> Bear.AddFile.Input {
		self.init(
			id: id,
			title: title,
			selected: selected,
			file: file,
			header: header,
			filename: filename,
			mode: mode,
			openNote: openNote,
			newWindow: newWindow,
			showWindow: showWindow,
			edit: edit,
			token: token
		)
	}
}

extension Bear.AddFile.Output {
	public static func create(note: String) -> Bear.AddFile.Output {
		self.init(
			note: note
		)
	}
}

extension Bear.AddText.Input {
	public static func create(id: String?, title: String?, selected: Bool? = nil, text: String?, header: String? = nil, mode: Bear.AddMode? = nil, newLine: Bool? = nil, tags: [Bear.Tag]? = nil, excludeTrashed: Bool? = nil, openNote: Bool? = nil, newWindow: Bool? = nil, showWindow: Bool? = nil, edit: Bool? = nil, timestamp: Bool? = nil, token: String? = nil) -> Bear.AddText.Input {
		self.init(
			id: id,
			title: title,
			selected: selected,
			text: text,
			header: header,
			mode: mode,
			newLine: newLine,
			tags: tags,
			excludeTrashed: excludeTrashed,
			openNote: openNote,
			newWindow: newWindow,
			showWindow: showWindow,
			edit: edit,
			timestamp: timestamp,
			token: token
		)
	}
}

extension Bear.AddText.Output {
	public static func create(note: String, title: String) -> Bear.AddText.Output {
		self.init(
			note: note,
			title: title
		)
	}
}

extension Bear.Archive.Input {
	public static func create(id: String?, search: String?, showWindow: Bool? = nil) -> Bear.Archive.Input {
		self.init(
			id: id,
			search: search,
			showWindow: showWindow
		)
	}
}

extension Bear.ChangeFont.Input {
	public static func create(font: Bear.Font, showWindow: Bool? = nil) -> Bear.ChangeFont.Input {
		self.init(
			font: font,
			showWindow: showWindow
		)
	}
}

extension Bear.ChangeTheme.Input {
	public static func create(theme: Bear.Theme, showWindow: Bool? = nil) -> Bear.ChangeTheme.Input {
		self.init(
			theme: theme,
			showWindow: showWindow
		)
	}
}

extension Bear.Create.Input {
	public static func create(title: String?, text: String?, clipboard: Bool? = nil, tags: [Bear.Tag]? = nil, file: Data? = nil, filename: String? = nil, openNote: Bool? = nil, newWindow: Bool? = nil, float: Bool? = nil, showWindow: Bool? = nil, pin: Bool? = nil, edit: Bool? = nil, timestamp: Bool? = nil, type: String? = nil, url: String? = nil) -> Bear.Create.Input {
		self.init(
			title: title,
			text: text,
			clipboard: clipboard,
			tags: tags,
			file: file,
			filename: filename,
			openNote: openNote,
			newWindow: newWindow,
			float: float,
			showWindow: showWindow,
			pin: pin,
			edit: edit,
			timestamp: timestamp,
			type: type,
			url: url
		)
	}
}

extension Bear.Create.Output {
	public static func create(identifier: String, title: String) -> Bear.Create.Output {
		self.init(
			identifier: identifier,
			title: title
		)
	}
}

extension Bear.DeleteTag.Input {
	public static func create(name: Bear.Tag, showWindow: Bool? = nil) -> Bear.DeleteTag.Input {
		self.init(
			name: name,
			showWindow: showWindow
		)
	}
}

extension Bear.GrabURL.Input {
	public static func create(url: URL, tags: [Bear.Tag]? = nil, pin: Bool? = nil, wait: Bool?) -> Bear.GrabURL.Input {
		self.init(
			url: url,
			tags: tags,
			pin: pin,
			wait: wait
		)
	}
}

extension Bear.GrabURL.Output {
	public static func create(identifier: String, title: String) -> Bear.GrabURL.Output {
		self.init(
			identifier: identifier,
			title: title
		)
	}
}

extension Bear.Locked.Input {
	public static func create(search: String?, showWindow: Bool? = nil) -> Bear.Locked.Input {
		self.init(
			search: search,
			showWindow: showWindow
		)
	}
}

extension Bear.OpenNote.Input {
	public static func create(id: String?, title: String?, header: String? = nil, excludeTrashed: Bool? = nil, newWindow: Bool? = nil, float: Bool? = nil, showWindow: Bool? = nil, openNote: Bool? = nil, selected: Bool? = nil, pin: Bool? = nil, edit: Bool? = nil, token: String? = nil) -> Bear.OpenNote.Input {
		self.init(
			id: id,
			title: title,
			header: header,
			excludeTrashed: excludeTrashed,
			newWindow: newWindow,
			float: float,
			showWindow: showWindow,
			openNote: openNote,
			selected: selected,
			pin: pin,
			edit: edit,
			token: token
		)
	}
}

extension Bear.OpenNote.Output {
	public static func create(note: String, identifier: String, title: String, tags: [Bear.Tag], isTrashed: Bool, modificationDate: Date, creationDate: Date) -> Bear.OpenNote.Output {
		self.init(
			note: note,
			identifier: identifier,
			title: title,
			tags: tags,
			isTrashed: isTrashed,
			modificationDate: modificationDate,
			creationDate: creationDate
		)
	}
}

extension Bear.OpenTag.Input {
	public static func create(name: [Bear.Tag], token: String?) -> Bear.OpenTag.Input {
		self.init(
			name: name,
			token: token
		)
	}
}

extension Bear.RenameTag.Input {
	public static func create(name: Bear.Tag, newName: String, showWindow: Bool? = nil) -> Bear.RenameTag.Input {
		self.init(
			name: name,
			newName: newName,
			showWindow: showWindow
		)
	}
}

extension Bear.Search.Input {
	public static func create(term: String?, tag: Bear.Tag? = nil, showWindow: Bool? = nil, token: String?) -> Bear.Search.Input {
		self.init(
			term: term,
			tag: tag,
			showWindow: showWindow,
			token: token
		)
	}
}

extension Bear.Tags.Input {
	public static func create(token: String) -> Bear.Tags.Input {
		self.init(
			token: token
		)
	}
}

extension Bear.Today.Input {
	public static func create(search: String?, showWindow: Bool? = nil, token: String?) -> Bear.Today.Input {
		self.init(
			search: search,
			showWindow: showWindow,
			token: token
		)
	}
}

extension Bear.Todo.Input {
	public static func create(search: String?, showWindow: Bool? = nil, token: String?) -> Bear.Todo.Input {
		self.init(
			search: search,
			showWindow: showWindow,
			token: token
		)
	}
}

extension Bear.Trash.Input {
	public static func create(id: String?, search: String?, showWindow: Bool? = nil) -> Bear.Trash.Input {
		self.init(
			id: id,
			search: search,
			showWindow: showWindow
		)
	}
}

extension Bear.Untagged.Input {
	public static func create(search: String?, showWindow: Bool? = nil, token: String?) -> Bear.Untagged.Input {
		self.init(
			search: search,
			showWindow: showWindow,
			token: token
		)
	}
}
